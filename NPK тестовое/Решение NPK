Сначала Разберусь, как устроена система. Есть N1 — единый ЛК, который регистрирует пользователей и организации. N2 и N3 — платформы для электронных торгов. Данные пользователей и организаций хранятся в N1 и синхронизируются с N2 и N3. При авторизации пользователь входит во все сервисы. Изменения в N2 и N3 должны отражаться в N1.
Теперь подумаю о ТЕСТ-ПЛАНЕ. Нужно охватить функциональное тестирование, интеграцию между сервисами, безопасность, производительность, юзабилити. 
Для тест-кейсов применю техники: классы эквивалентности, анализ граничных значений, сценарии использования, проверки синхронизации данных.
Какие данные могут быть? В N1: логин, пароль, email, данные организации (название, ИНН, адрес, контакты). В N2 и N3: информация о торгах, заявки, документы, история участия. При изменении данных в N2/N3 они должны обновляться в N1. Например, если в N2 изменить контактный телефон организации, это должно появиться в N1.

План проверок:
1. Регистрация пользователя в N1: проверка обязательных полей, валидация email, пароля. После регистрации профиль организации создан?
2. Авторизация: вход в N1, проверка, что сессия активна в N2 и N3. Если выход из N1, то сессии в N2/N3 закрываются?
3. Синхронизация данных: изменение данных организации в N2, проверка обновления в N1. То же для N3.
4. Обратная синхронизация: изменение данных в N1, проверка обновления в N2 и N3.
5. Обработка конфликтов: если данные изменены одновременно в N1 и N2, как система разрешает конфликт? Приоритет у какого сервиса?
6. Производительность: время синхронизации при большом объеме данных. Нагрузка на сервисы при массовой авторизации.
7. Безопасность: передача данных между сервисами по HTTPS, защита от SQL-инъекций, XSS. Проверка прав доступа — может ли пользователь изменить чужую организацию?
8. Юзабилити: удобство интерфейсов, сообщения об ошибках при синхронизации.

 Чек лист :
- Кейс-1: Регистрация пользователя в N1
- Кейс-2: Авторизация во всех сервисах
- Кейс-3: Синхронизация данных из N2 в N1
- Кейс-4: Конфликт данных при изменении в N1 и N2
- Кейс-5: Отказ одного из сервисов при отключении N2
- Кейс-6: Несанкционированный доступ к N2 без токена
- Кейс-7: Нагрузка на синхронизацию(1000 изменений в N2)
- Кейс-8: Обработка ошибок при синхронизации не валидных данных с N3
- Кейс-9: Восстановление пароля с неверным email
- Кейс-10: Срок действия ссылки для восстановления 24 часа
- Кейс-11: Доступные права администратора организации
- Кейс-12: Доступные права сотрудника
- Кейс-13: Доступные права аудитора
- Кейс-14: Изменение роли пользователя



Возможные дефекты:
- Рассинхронизация данных между сервисами при обрыве соединения.
- Некорректная обработка одновременных изменений в разных сервисах.
- Утечка данных из-за небезопасного API.
- Ошибки валидации данных (например, неверный формат ИНН).
- Проблемы с авторизацией: сессии не закрываются, или наоборот, разрываются без причины.
Проблемы при тестировании:
- Сложность эмуляции всех сервисов в тестовой среде.
- Зависимость от внешних систем (N2 и N3 могут быть недоступны).
- Время задержки синхронизации — сложно определить, когда проверять данные.
- Большой объем данных для тестирования производительности.

Инструменты:
- Postman для тестирования API.
- Selenium для UI-тестов.
- JMeter для нагрузочного тестирования.
- Просмотр логов сервера, к примеру Kibana
- Devtools для отслеживания запросов и их статусов
- Dbeaver для базы данных, проверки корректности записей.






